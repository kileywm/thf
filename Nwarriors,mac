#include Spell_routines.inc
#include actions.inc

Sub Main
  |----Detect Items------------------------------------------------------
  #include clickies.inc

  |----Detect Group Leaders------------------------------------------------------
  #include groups.inc

  /declare Command string outer
  /declare Action string outer Nothing
  /declare ChangeAction bool outer FALSE
  /declare NewTarget bool outer TRUE
  /declare RaidTarg int outer
  /declare NewRaidTarg int outer
  /declare RaidTargType string outer
  /declare HealTarg int outer
  /declare Arg1 string outer
  /declare Arg2 string outer
  /declare Arg3 string outer
  /declare Arg4 string outer

  /declare ExpCheck timer outer ${Math.Calc[${Math.Rand[100]}+200+${Me.Class.ID}]}
  /declare j int outer 0
  /if (!${Defined[Listening]}) /declare Listening bool outer TRUE
  /declare MaintainIllusion bool outer FALSE
  /declare ClassType string outer
  /declare ChangeMelody bool outer TRUE
  /declare Selos bool outer TRUE
  /declare DiscActivate timer outer
  /declare IntroAttack bool outer TRUE
  /declare TryAttempts int outer 0
  /declare AA1Timer timer outer 0
  /declare LastZone int outer ${Zone.ID}
  /declare ZoneChange bool outer FALSE

  /declare PetStatus int outer 0
  /declare PetBaneWeap timer outer 0
  /declare AutoPet bool outer TRUE
  /declare AutoPosition bool outer TRUE
  /declare AutoDisc bool outer FALSE

  /declare DebuffTimer timer outer 0
  /declare Dot1Timer timer outer 0
  /declare Dot2Timer timer outer 0
  /declare Dot3Timer timer outer 0
  /declare Dot4Timer timer outer 0
  /declare Dot5Timer timer outer 0
  /declare Dot6Timer timer outer 0
  /declare PurgeCrapBuffsTimer timer outer 0

  /declare TankCheck timer outer 0

  /echo [${Time.Time24}] Macro active...
  /call DetectSpells
  /call Settings
  /if (${Melee.Enable}) /melee off

  :Loop
  /if (${MacroQuest.GameState.Equal[INGAME]}) {
    /doevents
    /if (${Command.Length}>0) {
      /if (${Listening}) {
        /varset Action ${Command}
        /varset ChangeAction TRUE
      }
      /varset Command
    }
    /if (${NewRaidTarg}>0) {
      /if (${Listening}) {
        /varset RaidTarg ${NewRaidTarg}
      }
      /varset NewRaidTarg 0
    }

    /if ((${Zone.ID} && ${Zone.ID}!=${LastZone}) || ${ZoneChange}) {
      /varset ZoneChange TRUE
      /call ZoneChange
    }
    
    /if (${Action.NotEqual[Nothing]}) {
      /if (${ChangeAction}) /varset ChangeAction FALSE
      /if (${Action.NotEqual[Idle]} && ${MacroQuest.GameState.Equal[INGAME]}) /call ${Action}
      /if (!${ChangeAction}) {
        /if (${Cursor.ID} && ${Action.Equal[Combat]}) /autoinv
        /doevents
        /if (!${ChangeAction} && ${MacroQuest.GameState.Equal[INGAME]}) /call CheckLevels
        /doevents
        /if (!${ChangeAction} && ${MacroQuest.GameState.Equal[INGAME]}) /call CheckStatus
        /doevents
        /if (!${ChangeAction} && ${MacroQuest.GameState.Equal[INGAME]}) /call CheckBuffs
        /doevents
      }
    }
  }
  /goto :Loop

Sub CheckLevels
  /if (${ExpCheck}==0) /call BalExp

  /if (${Defined[DonorWristHeal]} && ${FindItem[${DonorWristHeal}].Timer}==0 && ${Me.PctHPs}<20) {
    /echo [${Time.Time24}] Clicking ${DonorWristHeal}
    /call cast ${DonorWristHeal} item
    /return
  }
/return

Sub CheckGems

/return

Sub CheckBuffs

  /if (${Defined[ImmortalityShield]} && ${ImmortalityShieldTimer}==0 && !${Me.Buff[${ImmortalityShieldBuff}].ID}) {
    /echo [${Time.Time24}] Clicking ${ImmortalityShield}
    /call cast ${ImmortalityShield} item
    /if (${Macro.Return.NotEqual[CAST_INTERRUPTED]}) {
      /varset ImmortalityShieldTimer 196
    }
    /return
  }

  /if (${Defined[OverHaste]} && !${Me.Buff[${OverHasteBuff}].ID}) {
    /echo [${Time.Time24}] Clicking ${OverHaste}
    /call cast ${OverHaste} item
    /return
  }

  /if (${Defined[FormOfDefense]} && !${Me.Buff[${FormOfDefenseBuff}].ID}) {
    /echo [${Time.Time24}] Clicking ${FormOfDefense}
    /call cast ${FormOfDefense} item
    /return
  }
  
  /if (${Defined[DonorBoot]} && ${FindItem[${DonorBoot}].Timer}==0 && !${Me.Buff[${DonorBootBuff}].ID}) {
    /echo [${Time.Time24}] Clicking ${DonorBoot}
    /call cast ${DonorBoot} item
    /return
  }

  /if (${Defined[DonorLeg]} && !${Me.Buff[${DonorLegBuff}].ID} && ${FindItem[${DonorLeg}].Timer}==0 && ${Action.NotEqual[Combat]}) {
    /echo [${Time.Time24}] Clicking ${DonorLeg}
    /call cast ${DonorLeg} item
    /return
  }

  /if (${Action.Equal[Idle]}) {
    /if (${Defined[CritShoulder]} && !${Me.Buff[${CritShoulderBuff}].ID}) {
      /echo [${Time.Time24}] Rebuffing ${CritShoulderBuff}
      /call cast ${CritShoulder} item
      /return
    }
    /if (${Defined[DestChaosMask]} && !${Me.Buff[${DestChaosMaskBuff}].ID}) {
      /echo [${Time.Time24}] Clicking ${DestChaosMask}
      /call cast ${DestChaosMask} item
      /return
    }
    /if (${Defined[DSK3HateRange]} && !${Me.Buff[${DSK3HateRangeBuff}].ID}) {
      /squelch /tar ID ${Me.ID}
      /delay 3
      /echo [${Time.Time24}] Clicking ${DSK3HateRange}
      /call cast ${DSK3HateRange} item
      /delay 2
      /return
    }
    /if (${Defined[WoSPet]} && !${Me.Buff[${WoSPetBuff}].ID}  && ${WoSPetTimer}==0) {
      /declare HasPet bool local FALSE
      /if (${Me.Pet.ID}) /varset HasPet TRUE
      /echo [${Time.Time24}] Buffing ${WoSPetBuff}
      /call cast ${WoSPet} item
      /if (!${Macro.Return.Equal[CAST_INTERRUPTED]}) {
        /varset WoSPetTimer 6000
        /delay 5
        /if (!${HasPet}) /pet get lost
      } else {
        /varset WoSPetTimer 300
      }
      /return
    }
  }
/return

Sub Combat
  /if (!${Spawn[id ${RaidTarg}].ID} || ${Spawn[id ${RaidTarg}].Type.Equal[Corpse]}) {
    /if (${Action.Equal[Combat]}) {
      /varset Action Hold
    }
    /varset ChangeAction TRUE
    /call CheckBoss
    /return
  } else /if (${Spawn[id ${RaidTarg}].ID} &&  (!${Target.ID} || ${Target.ID}!=${RaidTarg})) {
    /squelch /tar ID ${RaidTarg}
    /delay 3
  }

  /if (${Action.Equal[Combat]} && (${Target.Type.NotEqual[NPC]} || !${Target.ID})) {
    /varset ChangeAction TRUE
    /varset Action Hold
    /call CheckBoss
    /return
  }

  /if (${NewTarget}) {
    /echo [${Time.Time24}] Attacking...
    /call CheckBoss
    /if (!${Defined[Seravince]} && ${AutoPosition} && ${Target.LineOfSight}) {
      /call Position
    }
    /varset NewTarget FALSE
  }

  /if (${AutoPosition} && ((${Target.Distance} > 12 && ${Target.Distance} < 200) || ${Target.Distance}<6)) {
    /call Position
  }

  /if (!${Me.Combat}) /attack on

  /if (${AutoDisc} && ${DiscActivate}==0 && ${Defined[GuardDisc]} && ${Me.CombatAbilityReady[${GuardDisc}]} && ${Melee.DiscID}==0) {
    /echo [${Time.Time24}] Using ${GuardDisc}
    /doability ${GuardDisc}
    /varset DiscActivate 15
    /delay 2
  }

  /if (${AutoDisc} && ${DiscActivate}==0 && ${Defined[DonorWeapon20]} && ${FindItem[${DonorWeapon20}].Timer}==0 && ${Melee.DiscID}==0) {
    /echo [${Time.Time24}] Clicking ${DonorWeapon20}
    /call cast ${DonorWeapon20} item
    /varset DiscActivate 15
    /delay 2
  }

  /if (${AutoDisc} && ${DiscActivate}==0 && ${Defined[TwinsDefRing]} && ${FindItem[${TwinsDefRing}].Timer}==0 && ${Melee.DiscID}==0) {
    /echo [${Time.Time24}] Clicking ${TwinsDefRing}
    /call cast ${TwinsDefRing} item
    /varset DiscActivate 15
    /delay 2
  }

  /if (${AutoDisc} && ${DiscActivate}==0 && ${Defined[StrongDefRing]} && ${FindItem[${StrongDefRing}].Timer}==0 && ${Melee.DiscID}==0) {
    /echo [${Time.Time24}] Clicking ${StrongDefRing}
    /call cast ${StrongDefRing} item
    /varset DiscActivate 15
    /delay 2
  }

  /if (${AutoDisc} && ${DiscActivate}==0 && ${Defined[GargoyleRing]} && ${FindItem[${GargoyleRing}].Timer}==0 && ${Melee.DiscID}==0) {
    /echo [${Time.Time24}] Clicking ${GargoyleRing}
    /call cast ${GargoyleRing} item
    /varset DiscActivate 15
    /delay 2
  }

  /if (${Defined[DonorLeg]} && ${FindItem[${DonorLeg}].Timer}==0 && !${Me.Buff[${DonorLegBuff}].ID} && ${Target.Distance}<30) {
    /echo [${Time.Time24}] Clicking ${DonorLeg}
    /call cast ${DonorLeg} item
    /return
  }

  /if (${Defined[ChaosWrist]} && !${Me.Buff[${ChaosWristBuff}].ID} && ${ChaosWristTimer}==0) {
    /echo [${Time.Time24}] Clicking ${ChaosWrist}
    /call cast ${ChaosWrist} item
    /if (${Macro.Return.NotEqual[CAST_INTERRUPTED]}) {
      /varset ChaosWristTimer 6000
      /pet get lost
    }
    /return
  }
  
  /if (${Defined[DonorChest]} && ${FindItem[${DonorChest}].Timer}==0) {
    /echo [${Time.Time24}] Clicking ${DonorChest}
    /call cast ${DonorChest} item
    /return
  }

  /if (${FindItemCount[${NadoxTankShield}]} && ${FindItem[${NadoxTankShield}].Timer}==0 && ${Target.Distance}<${Math.Calc[${NadoxTankShieldRange}*${RangeMod}]}) {
    /echo [${Time.Time24}] Clicking ${NadoxTankShield}
    /call cast ${NadoxTankShield} item
    /delay 2
  }

  /if (${DiscActivate}==0 && ${Me.CombatAbilityReady[${ScowlDisc}]} && ${Me.PctEndurance}>30) {
    /doability ${ScowlDisc}
    /varset DiscActivate 15
    /delay 2
  }

  /if (${DiscActivate}==0 && ${Me.CombatAbilityReady[${VengeanceDisc}]} && ${Me.PctEndurance}>30) {
    /doability ${VengeanceDisc}
    /varset DiscActivate 15
    /delay 2
  }

  /if (!${Defined[Vule]} && ${FindItemCount[${BoomStick}]} && ${FindItem[${BoomStick}].Timer}==0 && ${Target.Distance}<${Math.Calc[${BoomStickRange}*${RangeMod}]}) {
    /echo [${Time.Time24}] Clicking ${BoomStick}
    /call cast ${BoomStick} item
    /return
  }

  /if (${Defined[Epic15]} && ${FindItem[${Epic15}].Timer}==0) {
    /echo [${Time.Time24}] Clicking ${Epic15}
    /call cast ${Epic15} item
    /return
  }

  /if (${Defined[Epic20]} && ${FindItem[${Epic20}].Timer}==0) {
    /echo [${Time.Time24}] Clicking ${Epic20}
    /call cast ${Epic20} item
    /return
  }

  /if (${Defined[DSK3TankEar]} && ${FindItem[${DSK3TankEar}].Timer}==0) {
    /echo [${Time.Time24}] Clicking ${DSK3TankEar}
    /call cast ${DSK3TankEar} item
    /return
  }
/return

Sub Burn
  /varset Action Combat
/return

Sub ShortBuff
  /if (!${ChangeAction} && ${Action.Equal[ShortBuff]}) {
    /varset ChangeAction TRUE
    /varset Action Nothing
  }
/return

Sub LongBuff
  /if (!${ChangeAction} && ${Action.Equal[LongBuff]}) {
    /varset ChangeAction TRUE
    /varset Action Nothing
  }
/return

Sub DetectSpells

    |----Detect Spells------------------------------------------------------
    /call FindRank "Enraged Scowl Rk."
    /if (${Macro.Return.Length}>3 && !${Defined[ScowlDisc]}) /declare ScowlDisc     string  outer ${Macro.Return}
    
    /call FindRank "Hurricane Swipe Rk."
    /if (${Macro.Return.Length}>3 && !${Defined[SwipeDisc]}) /declare SwipeDisc     string  outer ${Macro.Return}

    /call FindRank "Defender's Vengeance Rk."
    /if (${Macro.Return.Length}>3 && !${Defined[VengeanceDisc]}) /declare VengeanceDisc     string  outer ${Macro.Return}

    /call FindRank "Defender's Guard Rk."
    /if (${Macro.Return.Length}>3 && !${Defined[GuardDisc]}) /declare GuardDisc     string  outer ${Macro.Return}

    /if (${Me.CombatAbility[Mastery Discipline]}) /declare MasteryDisc string outer "Mastery Discipline"
/return

|---Enrage-----------------------------------------------------------------
#Event Enrage "|${Target.CleanName}| has become ENRAGED#*#"

Sub Event_Enrage
  /if (${Target.PctHPs}<11) {
    /echo [${Time.Time24}] Enrage detected!
    /declare EnrageTimer timer local 100
    :EnrageLoop
    /if (${EnrageTimer}>0 && (${Action.Equal[Combat]} || ${Action.Equal[Killnear]}) && !${NewTarget} && !${ChangeAction}) {
      /delay 1
      /if (${Math.Abs[${Me.Heading.Degrees}-${Target.Heading.Degrees}]}>=90 && ${Math.Abs[${Me.Heading.Degrees}-${Target.Heading.Degrees}]}<=270) {
        /if (${Me.Combat}) /attack off
      } else {
        /if (!${Me.Combat}) /attack on
      }
      /if (!${Spawn[id ${RaidTarg}].ID} || ${Spawn[id ${RaidTarg}].Type.Equal[Corpse]}) /return
      /goto :EnrageLoop
    }
  }
/return
